/*****************************************************
Compiler: CodeWizardAVR V1.24.6 Standard

Project : Automatic humidity and temperature control using SHT11 
Version : 2.0.0
Date    : 13.6.2010
Author  : Elvir Mujkić                          

Chip type           : ATmega32
Program type        : Application
Clock frequency     : 2,000000 MHz
Memory model        : Small
External SRAM size  : 0
Data Stack size     : 256
*****************************************************/

#include <mega32.h>
#include <stdio.h>
#include <delay.h>
#include <math.h>
// Connecting the LDC display to the A port 
#asm
   .equ __lcd_port=0x1B
#endasm    
#include <lcd.h>  

// Declaration of global variables 
 
typedef union
{ unsigned int i; float f;} value; 
 
 
enum {TEMP,HUMI};
 
sfrb	PINB = 0x16;
sfrb	PORTB = 0x18;
sfrb	DDRB = 0x17;
// defining sensor ports      
#define		SHT_DATA_OUT     DDRB.0
#define		SHT_DATA_IN  	PINB.0
#define		SHT_SCK		PORTB.1
#define		noACK	        	0
#define		ACK		1
//sensor commands           adr  command  r/w 
#define STATUS_REG_W 0x06   //000   0011    0
#define STATUS_REG_R 0x07   //000   0011    1
#define MEASURE_TEMP 0x03   //000   0001    1
#define MEASURE_HUMI 0x05   //000   0010    1
#define RESET        0x1e   //000   1111    0    


const float C1=-4.0;              // za 12 Bit
const float C2=+0.0405;           // za 12 Bit
const float C3=-0.0000028;        // za 12 Bit
const float T1=+0.01;             // za 14 Bit @ 5V
const float T2=+0.00008;          // za 14 Bit @ 5V				
		       
char lcd_buffer[33];
char not_leap(void);

//declaration of functions required for sensor operation 
char SHT_WriteByte(unsigned char value);
char SHT_ReadByte(unsigned char ack);
void s_transstart(void);
void s_connectionreset(void);
char s_softreset(void);
char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode);
void calc_sth11(float *p_humidity ,float *p_temperature);
float calc_dewpoint(float h,float t);

char s_write_statusreg(unsigned char *p_value); 
char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum);

void main(void)
{ 
int test_temp,test_vlag,i;          
value humi_val, temp_val;
unsigned char error, checksum, status;
float dew_point,zad_temp,zad_vlag;
zad_temp=27.0;
zad_vlag=50.0;

// Port A
// Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=1 State2=T State1=T State0=T 
PORTA=0x08;
DDRA=0x08;

// Port B
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=1 State1=T State0=T 
PORTB=0x04;
DDRB=0x04;

// Port C
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTC=0x00;
DDRC=0xFF;

// Port D
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTD=0xFF;
DDRD=0x00;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=FFh
// OC0 output: Disconnected
TCCR0=0x00;
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer 1 Stopped
// Mode: Normal top=FFFFh
// OC1A output: Discon.
// OC1B output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer 1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0x00;
TCCR1B=0x00;
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;


// Timer/Counter 2 initialization
// Clock source: TOSC1 pin
// Clock value: PCK2/128
// Mode: Normal top=FFh
// OC2 output: Disconnected
ASSR=0x08;
TCCR2=0x05;
TCNT2=0x00;
OCR2=0x00;


// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=0x00;
MCUCSR=0x00;

   // Timer/Counter    // Timer/Counter initialization

TIMSK=0x40;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
// Analog Comparator Output: Off
ACSR=0x80;
SFIOR=0x00; 

lcd_init(24); // Initialization LCD display

PORTB.1	= 0;	
DDRB.1 = 1;	
PORTB.0 = 0;
   
s_connectionreset();

while (1)
	{
	error=0;
	
	error+=s_measure((unsigned char*) &humi_val.i,&checksum,HUMI);
        error+=s_measure((unsigned char*) &temp_val.i,&checksum,TEMP);
    if(error!=0) s_connectionreset();
    else{
    	humi_val.f=(float)humi_val.i;                   
      	temp_val.f=(float)temp_val.i;                   
      	calc_sth11(&humi_val.f,&temp_val.f);            
      	dew_point=calc_dewpoint(humi_val.f,temp_val.f); 
        if(PINB.2==0)
	        zad_temp=zad_temp+1;
	if(PINA.3==0)
	        zad_temp=zad_temp-1;
	if(PIND.2==0)
	        zad_vlag=zad_vlag+3;
	if(PIND.3==0)
	        zad_vlag=zad_vlag-3;
	
        sprintf(lcd_buffer,"current temperature  T:%5.1fC
H:%5.1f%%",temp_val.f,humi_val.f);
                lcd_gotoxy(0,0);
	        lcd_puts(lcd_buffer);
	sprintf(lcd_buffer,"Default T:%5.1fC H:%5.1f%%",zad_temp,zad_vlag);
	        lcd_gotoxy(0,1);
		lcd_puts(lcd_buffer);
		
	test_temp=(int)zad_temp-(int)temp_val.f;
	test_vlag=(int)zad_vlag-(int)humi_val.f;
	
	if(test_temp>1)
	        PORTC.5=1;
	else if(test_temp<=-1)
	        PORTC.3=1;
	else 
	        i=1;
	if (test_temp>0&&test_vlag>0)
	        PORTC.3=0;
	if (test_temp<=0)
	        PORTC.5=0;
			
	if(test_vlag>5)
	        PORTC.4=1;
	else if(test_vlag<=-5)
	        PORTC.3=1;
	else 
	        i=1;
	if (test_vlag<=0)
	        PORTC.4=0;
    	}  
  	delay_ms(1000);
  	}  
}
//----------------------------------------------------------------------------------
char SHT_WriteByte(unsigned char value) 
{ 
  unsigned char i,error=0;  
  for (i=0x80;i>0;i/=2)             	
  	{ 
  	if (i & value) 	SHT_DATA_OUT=0;
    else SHT_DATA_OUT=1;                        
    SHT_SCK=1;                            	
    delay_us(5);				  	
    SHT_SCK=0;
  	}
  SHT_DATA_OUT=0;                       	
  SHT_SCK=1;                            	
  error=SHT_DATA_IN;                    
  SHT_SCK=0;        
  return error;                    
}

//----------------------------------------------------------------------------------
char SHT_ReadByte(unsigned char ack) 
{ 
  unsigned char i,val=0;
  SHT_DATA_OUT=0;             			
  for (i=0x80;i>0;i/=2)             	     
    { 
    SHT_SCK=1;          				
    if (SHT_DATA_IN) val=(val | i);   	        	
    SHT_SCK=0;  					 
  	}
  SHT_DATA_OUT=ack;               		
  SHT_SCK=1;                                    	
  delay_us(5);         				
  SHT_SCK=0;						    
  SHT_DATA_OUT=0;                 		
  return val;
}

//----------------------------------------------------------------------------------
//       _____         ________
// DATA:      |_______|
//           ___     ___
// SCK : ___|   |___|   |______
//----------------------------------------------------------------------------------
void s_transstart(void)
{                                
   SHT_DATA_OUT=0; 
   SHT_SCK=0;                   
   delay_us(1);
   SHT_SCK=1;
   delay_us(1);
   SHT_DATA_OUT=1;
   delay_us(1);
   SHT_SCK=0;  
   delay_us(5);
   SHT_SCK=1;
   delay_us(1);
   SHT_DATA_OUT=0;		   
   delay_us(1);
   SHT_SCK=0;		   
}

//----------------------------------------------------------------------------------
//       _____________________________________________________         ________
// DATA:                                                      |_______|
//          _    _    _    _    _    _    _    _    _        ___     ___
// SCK : __| |__| |__| |__| |__| |__| |__| |__| |__| |______|   |___|   |______
//----------------------------------------------------------------------------------

void s_connectionreset(void)
{  
  unsigned char i; 
  SHT_DATA_OUT=0; SHT_SCK=0;     	 
  for(i=0;i<9;i++)                 
  	{ 
  	SHT_SCK=1;
  	delay_us(1);
    SHT_SCK=0;
  }
  s_transstart();                
}

//----------------------------------------------------------------------------------
 
char s_softreset(void)
{ 
  unsigned char error=0;  
  s_connectionreset();              
  error+=SHT_WriteByte(RESET);      
  return error;                     
}

//----------------------------------------------------------------------------------
char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
{ 
  unsigned error=0;
  unsigned int i;

  s_transstart();                   
  switch(mode){                     
    case TEMP	: error+=SHT_WriteByte(MEASURE_TEMP); break;
    case HUMI	: error+=SHT_WriteByte(MEASURE_HUMI); break;
    default     : break;	 
  }
  for (i=0;i<65535;i++) if(SHT_DATA_IN==0) break; 	
  if(SHT_DATA_IN) error+=1;                	
  *(p_value+1)  =SHT_ReadByte(ACK);        	
  *(p_value)  =SHT_ReadByte(ACK);          	
  *p_checksum =SHT_ReadByte(noACK);        	
  return error;
}   

//----------------------------------------------------------------------------------------
// calculate p_temperature [°C] i humidity [%RH] 
// input :  humi [Ticks] (12 bit) 
//          temp [Ticks] (14 bit)
// output:  humi [%RH]
//          temp [°C] 
//----------------------------------------------------------------------------------------

void calc_sth11(float *p_humidity ,float *p_temperature)
{ 

  //float rh=*p_humidity;           
  //float t=*p_temperature;         
  float rh_lin;                     
  float rh_true;                    
  float t_C;                        

  t_C=*p_temperature*0.01 - 40;                  			
  rh_lin=C3*(*p_humidity)*(*p_humidity) + C2*(*p_humidity) + C1;    
  rh_true=(t_C-25)*(T1+T2*(*p_humidity))+rh_lin;   	
  if(rh_true>100)rh_true=100;        
  if(rh_true<0.1)rh_true=0.1;       

  *p_temperature=t_C;               
  *p_humidity=rh_true;              
}

float calc_dewpoint(float h,float t)
{ 
  float logEx,dew_point;
  logEx=0.66077+7.5*t/(237.3+t)+(log10(h)-2);
  dew_point = (logEx - 0.66077)*237.3/(0.66077+7.5-logEx);
  return dew_point;
}   

//----------------------------------------------------------------------------------
char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum)
{ 
  unsigned char error=0;
  s_transstart();                    
  error=SHT_WriteByte(STATUS_REG_R); 
  *p_value=SHT_ReadByte(ACK);        
  *p_checksum=SHT_ReadByte(noACK);   
  return error;                      
}
//----------------------------------------------------------------------------------
char s_write_statusreg(unsigned char *p_value)
{ 
  unsigned char error=0;
  s_transstart();                    
  error+=SHT_WriteByte(STATUS_REG_W);
  error+=SHT_WriteByte(*p_value);    
  return error;                      
}